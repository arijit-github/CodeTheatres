<?php/** * Insync Development Team * * */ class Insync_Company_Model_Company_Abstract extends Mage_Api_Model_Resource_Abstract {          public function downloadCompany($filters = null) {         //$result=array();         $preparedFilters = array();         $preparedFilters=Mage::helper('insync_generic')->getFilters($filters);         unset($filters);                  $collection = Mage::getModel('insync_company/company')->getCollection()->addFieldToSelect('*');                  if (isset($preparedFilters['issync'])) {             // only include table, if required                          $collection->getSelect()->joinLeft(array('issync' => Mage::getSingleton("core/resource")->getTableName('insync_customer')),                 'issync.entity_id = e.entity_id', array('issync.aeccode','issync.issync'));                          if ($preparedFilters['issync'] == '0') {                 $collection->getSelect()->where('issync.issync=0 or issync.issync is ?',new Zend_Db_Expr('null'));             } else {                 $collection->getSelect()->where('issync.issync=?', $preparedFilters['issync']);             }                      }                  if (is_array($preparedFilters)) {             try {                 foreach ($preparedFilters as $field => $value) {                     if ($field == 'limit' || $field == 'issync') {                         continue;                     }                     //if (isset($this->_mapAttributes[$field])) {                     //	$field = $this->_mapAttributes[$field];                     $collection->addFieldToFilter($field, $value);                     //}                 }             } catch (Mage_Core_Exception $e) {                 $this->_fault('filters_invalid', $e->getMessage());             }         }                  $company_id=array();         if(isset($preparedFilters['limit'])){             $collection->getSelect()->limit($preparedFilters['limit']);         }                           $output=array();         foreach($collection as $item){             $result=array();             $company_contact=array();             $company_address=array();             $result = $item->getData();             $companyContactCollection = Mage::getModel('insync_company/companycontact')->getCollection();             $companyContactCollection->getSelect()->join( array('comp'=> 'insync_contactpersonrole'), 'comp.contactpersonrole_id = main_table.role', array('comp.value'));             $companyContactCollection->addFieldToSelect('*');             $companyContactCollection->addFieldToFilter('main_table.company_id',$item->getData('company_id'));             $companyAddressCollection = Mage::getModel('insync_company/companyaddress')->getCollection();             $companyAddressCollection->addFieldToFilter('main_table.company_id',$item->getData('company_id'));             unset($customer_ids);             foreach($companyContactCollection as $key=> $contact){                 $customerData = Mage::getModel('customer/customer')->load($contact->getData('customer_id'));                 $company_contact[$key]=array('customer_id'=>$contact->getData('customer_id'),'active'=>$contact->getData('active'),'email'=>$customerData->getEmail(),'firstname'=>$customerData->getFirstname(),'middlename'=>$customerData->getMiddlename(),'lastname'=>$customerData->getLastname(),'role'=>$contact->getData('value'),'customer_token'=>$contact->getData('customer_token'));                 /* $company_contact[$key]['customer_id']=$contact->getData('customer_id'); */             }             foreach($companyAddressCollection as $key=> $address){                 $company_address[$key]=array(                     'addressId'=>$address->getData('address_id'),                     'aectoken'=>$address->getData('aectoken'),                     'firstname'=>$address->getData('firstname'),                     'middlename'=>$address->getData('middlename'),                     'lastname'=>$address->getData('lastname'),                     'city'=>$address->getData('city'),                     'street'=>unserialize($address->getData('street')),                     'country_id'=>$address->getData('country_id'),                     'country'=>$address->getData('country'),                     'state'=>$address->getData('state'),                     'postcode'=>$address->getData('postcode'),                     'telephone'=>$address->getData('fax'),                     'fax'=>$address->getData('telephone'),                     'vat'=>$address->getData('vat'),                     'is_default_billing'=>$address->getData('is_default_billing'),                     'is_default_shipping'=>$address->getData('is_default_shipping'),                     'is_default_payer'=>$address->getData('is_default_payer'),                     'is_default_sold'=>$address->getData('is_default_sold')                 );             }             $result['company_contact']=$company_contact;             $result['company_address']=$company_address;             $output[]=$result;         }         return $output;     }          	public function massUploadCompany($uploadCompanies) {		$returnresult = array();		foreach ($uploadCompanies as $uploadData){			$uploadData = (array)$uploadData;			$returnresult[] = $this->uploadCompany($uploadData['company_name'],$uploadData['companydata'],$uploadData['companytoken'],$uploadData['companyaddress'],$uploadData['companycontact']);		}		return $returnresult;	}		public function uploadCompany($companyname, $data, $companytoken, $address, $contactlist) {		$companygroupid = null;		$manager_email = null;		$addressresponse = array();		if ($companyname == '') {			$temp = 'Field [Company Name] is required *(used as company code)';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		if (strlen($companyname) > 32) {			$temp = 'Field [Company Name/Code] cannot be greater then 32 characters';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		// company data		if (!empty($data) && count($data) >= 1) {			$data = (array) $data;			$data['company_name'] = $companyname;						/* Address Validity Check! */			$validateAddress = $this->validateAddress($address, $data);			/* Address Validity Check! */			$requiredfields[] = 'company_name';			$requiredfields[] = 'firstname';			$requiredfields[] = 'lastname';			$error = array();			$db = Mage::getSingleton('core/resource')->getConnection('core_write');			$tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');			foreach ($requiredfields as $value) {				if ($data[$value] == '') {					$temp = 'Field [' . $value . '] is required';					$this->_fault('data_invalid', $temp);					$error['data_invalid'] = $temp;					return $error;				}			}			$data['company_id'] = Mage::helper('insync_company')->getCompany(null, 'company_id', $data['company_name']);			//validate new company			$tempnewc = Mage::helper('insync_company')->newCompanyValidate($data['email'], $data['company_name']);			if ($data['company_id'] == '' && $tempnewc > 0) {				$temp = ($tempnewc == 1) ? 'Email already exist [' . $data['email'] . ']' : 'Company Name(/code) already used ..[' . $data['companyname'] . ']';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			if ($data['discountrequired'] == 1 && intval($data['companydiscount']) <= 0) {				$temp = 'You must pass discount amount greater then zero, as you are passing discount required field to "yes" ';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			if ($data['discountrequired'] == '' && intval($data['companydiscount']) > 0) {				$temp = '[discountrequired] field is required';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			//validate new company			if ($data['company_id'] == '') {				$data['company_id'] = Mage::helper('insync_company')->insertCompanyRow($data);			} else {				$temp = $data['companycredit'];				$data['company_display_name'] = $data['companydisplayname'];				$manager_email = $data['manager_email'];				unset($data['companycredit'],$data['companydisplayname'],$data['manager_email']);				$db = Mage::getSingleton('core/resource')->getConnection('core_write');				$tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');				$db->update($tableName, $data, 'company_id=' . $data['company_id']);				$data['companycredit'] = $temp;			}			// find company group and set// 			$companytaxid = '';// 			$targetGroup = Mage::getModel('customer/group')->load($data['company_name'], 'customer_group_code');// 			if ($data['company_id'] != '') {// 				$companytaxid = Mage::helper('insync_company')->getCompany($data['company_id'], 'customertaxclass');// 			}// 			if ($targetGroup->getId() == '') {//create// 				Mage::getSingleton('customer/group')->setData(// 				array('customer_group_code' => $data['company_name']// 				, 'tax_class_id' => $data['customertaxclass'])// 				)->save();// 				$targetGroup = Mage::getModel('customer/group')->load($data['company_name'], 'customer_group_code');// 			} else {// 				$targetGroup->setCode($data['company_name']);// 				$targetGroup->setTaxClassId($data['customertaxclass']);// 				$targetGroup->save();// 			}// 			Mage::helper('insync_company')->setCompanyTaxClassOnCustomer($data['company_id'], $targetGroup->getId());			// find company group and set// 			// create or update the shopping cart price rule// 			if (intval($data['companydiscount']) > 0) {// 				Mage::helper('insync_company')->uploadCompanyShoppingCartPriceRule($data['company_name'], $targetGroup->getId(), $data['companydiscount'], $data['discountrequired']);// 			}// 			// create or update the shopping cart price rule						if (!empty($contactlist)) {				//$groupName = $contactlist[0]->customer_group_id;				//$groupId = Mage::getModel('customer/group')->load($groupName, 'customer_group_code')->getCustomerGroupId();				$groupId = Mage::getModel('customer/group')->load($contactlist[0]->customer_group_id)->getId();			} else {				$groupId = 1;	//	General (default)
			}			// Create customer group category tree			// $tableName = Mage::getSingleton("core/resource")->getTableName('insync_groupcategory');			// $groupcategoryid = Mage::helper('insync_company')->getCompanyCategoryId($data['company_name'], null);			// if ($groupcategoryid == 0) {				// //create				// $categories = Mage::getModel('catalog/category')->getCollection()				// ->addAttributeToSelect('id')				// ->addAttributeToSelect('is_active');				// $categoryids = '';				// foreach ($categories as $category) {					// if ($category->getIsActive()) { // Only pull Active categories						// $categoryids .= ',' . $category->getId();					// }				// }				// if (count($categoryids) > 3)					// $categoryids = substr($categoryids, 3);				// unset($categories);				// $fdata = array();				// $fdata['groupcategory_name'] = $data['company_name'];				// $fdata['active'] = 1;				// $fdata['categoryids'] = $categoryids;				// $fdata['visiblecategoryids'] = $categoryids;				// $fdata['customer_group_id'] = $groupId;								// $db->insert($tableName, $fdata);				// $groupcategoryid = Mage::helper('insync_company')->getCompanyCategoryId($data['company_name'], null);			// } else {				// //update				// $edata = array();				// $edata['customer_group_id'] = $groupId;				// $edata['groupcategory_name'] = $data['company_name'];				// $db->update($tableName, $edata, 'groupcategory_id=' . $groupcategoryid);			// }			// $tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');			// $edata = array();			// $edata['companycategoryid'] = $groupcategoryid;			// $db->update($tableName, $edata, 'company_id=' . $data['company_id']);			// Create customer group category tree			// update company credit if given			if (intval($data['companycredit']) > 0) {				$companycredit = Mage::helper('insync_company')->getCustomerCompanyBalance(null, $data['company_id']);				if (intval($data['companycredit']) > intval($companycredit)) { // money comes					Mage::helper('insync_company')->updateCompanyCredit($data['company_id'], null, null, null, null, 0, (intval($data['companycredit']) - intval($companycredit)), 'Assign by ERP server');				} else { // money goes					Mage::helper('insync_company')->updateCompanyCredit($data['company_id'], null, null, null, null, (intval($companycredit) - intval($data['companycredit'])), 0, 'Used by ERP server');				}			}			// update company credit if given		}		// check company existence		if (Mage::helper('insync_company')->getCompany(null, 'company_id', $companyname, false) == '') {			$temp = 'Company does not exist';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		// address packet update/save if come		if (!empty($address)) {			$data = Mage::helper('insync_company')->getCompany(null, null, $companyname, true);			// validate address			unset($requiredfields);			$requiredfields[] = 'street';			$requiredfields[] = 'city';			$requiredfields[] = 'country_id';			$requiredfields[] = 'postcode';			$requiredfields[] = 'telephone';			/* 			 * for each address packet			 * if there's an error			 * then add the fault code to an array and Continue to next address			 * else add null value consecutively			 */			$errorAddress = array();						foreach ($address as $addresspacket) {				$addresspacket = (array) $addresspacket;				// if id found load the address and check the presence				if (!empty($addresspacket['addressId'])) {					if (!Mage::helper('insync_company')->isCompanyAddress($addresspacket['addressId'], $data['company_id'])) { 						$this->_fault('data_invalid', 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist');						$error['data_invalid'] = 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist';						// break; 						return $error;					}				}				// if id found load the address and check the presence				$errorAddress1 = null;				foreach ($requiredfields as $value) {					if (empty( $addresspacket[$value]) ) { 						$this->_fault('data_invalid', '[' . $value . '] is required field, which is missing in a packet');						$error['data_invalid'] = '[' . $value . '] is required field, which is missing in a packet';//						break; 						return $error;					}					if ($value == 'country_id') {						$countryName = Mage::getModel('directory/country')->load($addresspacket[$value])->getName();						if ($countryName == '') { 							$this->_fault('data_invalid', 'Country ID [' . $addresspacket[$value] . '] is not available');							$error['data_invalid'] = 'Country ID [' . $addresspacket[$value] . '] is not available';//							break; 							return $error;						}						$states = Mage::getModel('directory/country')->load($addresspacket[$value])->getRegions();						$temp = $states->toArray();						if (intval($temp['totalRecords']) > 0) {							if ($addresspacket['state'] == '') { 								$this->_fault('data_invalid', 'State field is required for Country [' . $countryName . ']');								$error['data_invalid'] = 'State field is required for Country [' . $countryName . ']';//								break; 								return $error;							} else {								// validate for state								$found = false;								foreach ($temp['items'] as $v) {									$tv = (array) $v;									if ($tv['code'] == $addresspacket['state']) {										$found = true;										break;									}								}								if (!$found) { 									$this->_fault('data_invalid', 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']');									$error['data_invalid'] = 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']';//									break; 									return $error;								}							}						}					}// 					$errorAddress1 = null;	//	Null for address packet where no error occurred				}//				$errorAddress[]['data_invalid'] = $errorAddress1;			}			// validate address			$temp = Mage::helper('insync_company')->getCompanyDefaultAddress($data['company_id']);			foreach ($address as $value) {								/* if $errorAddress[0] has 'data_invaild' key, then array_shift $errorAddress and CONTINUE */				if (isset($errorAddress[0]['data_invalid'])) {					//Mage::log('/* if $errorAddress[0] has data_invaild key, then array_shift $errorAddress and CONTINUE */', null, '24_March.log');					$addressresponse[]['error'] = $errorAddress[0]['data_invalid'];					array_shift($errorAddress);					continue;				}				array_shift($errorAddress);								$dd = (array) $value;				$old_id = $dd['addressId'];				$tempdata['aectoken'] = $dd['aectoken'];				$dd['firstname'] = ($dd['firstname']) ? $dd['firstname'] : $data['firstname'];				$dd['middlename'] = ($dd['middlename']) ? $dd['middlename'] : $data['middlename'];				$dd['lastname'] = ($dd['lastname']) ? $dd['lastname'] : $data['lastname'];				$dd['company'] = $data['company_name'];				$dd['company_id'] = $data['company_id'];				$dd['street'] = serialize($dd['street']);								/*  */				$tempdata['is_default_billing'] = $dd['is_default_billing'];				$tempdata['is_default_shipping'] = $dd['is_default_shipping'];							/*  */				$dd['is_billing'] = ($dd['is_default_billing'] == 1) ? 1 : 0;				$dd['is_shipping'] = ($dd['is_default_shipping'] == 1) ? 1 : 0;				unset($dd['is_default_billing'], $dd['is_default_shipping'], $dd['aectoken'], $dd['addressId']);				if (!empty($old_id)) {					$isadd = 0;					if ($dd['is_billing'] == 1) {						$this->updateCompanyDefaultAddress($old_id, $dd, 'is_billing', $data['company_id']);						$tempdata['addressId'] = $old_id;						$isadd += 1;					}					if ($dd['is_shipping'] == 1) {						$this->updateCompanyDefaultAddress($old_id, $dd, 'is_shipping', $data['company_id']);						$tempdata['addressId'] = $old_id;						$isadd += 1;					}					// if ($isadd == 0) { // update default if nothing found						// $this->updateCompanyDefaultAddress($old_id, $dd, '', $data['company_id']);						// $tempdata['addressId'] = $old_id;					// }				} else {					//Mage::log($dd,null,'a11.log');					//Mage::log($temp,null,'a11.log');					$isadd = 0;					if ($dd['is_billing'] == 1 && $temp['billing'] != 0) {						Mage::log('----billing',null,'a11.log');						$this->updateCompanyDefaultAddress($temp['billing'], $dd, 'is_billing', $data['company_id']);						$tempdata['addressId'] = $temp['billing'];						$isadd += 1;					}					if ($dd['is_shipping'] == 1 && $temp['shipping'] != 0) {						Mage::log('----shipping',null,'a11.log');						$this->updateCompanyDefaultAddress($temp['shipping'], $dd, 'is_shipping', $data['company_id']);						$tempdata['addressId'] = $temp['shipping'];						$isadd += 1;					}					if ($isadd == 0) { // insert if nothing found						$tempdata['addressId'] = $this->insertCompanyAddres($dd);					}				}				$addressresponse[] = $tempdata;				unset($old_id, $dd);			}		}		// address packet update/save if come		// contact person update/save if come		$cpError = array();		if (!empty($contactlist)) {						// validate			foreach ($contactlist as $contactpacket) {				$contactpacket = (array) $contactpacket;				if ($contactpacket['website_id'] == '' || $contactpacket['firstname'] == '' || $contactpacket['lastname'] == '' || $contactpacket['email'] == '' || $contactpacket['addtocompany'] == '' || $contactpacket['customer_group_id'] == '') {					$temp = 'All fields in each Contact list are mandatory [website_id][firstname][lastname][email][addtocompany][customer_group_id]';					$this->_fault('data_invalid', $temp);					$error['data_invalid'] = $temp;//					continue;					 					return $error;				}else {									//	Validate E-mail					if (!filter_var($contactpacket['email'], FILTER_VALIDATE_EMAIL)) {						$temp = "Invalid email format";						$this->_fault('data_invalid', $temp);						$error['data_invalid'] = $temp;//						continue;	 					return $error;					}					else $cpError[] = null;				}								//	If isLogin not set, set default 1				if (!array_key_exists('islogin',$contactpacket) or empty($contactpacket['islogin']))					$contactpacket['islogin'] = 1;								}//			if(!isset($cpError)){				// load company customer				$collection = Mage::getModel('customer/customer')->getCollection()->addAttributeToSelect('*');				$collection->getSelect()->joinLeft(array('ccontact' => Mage::getSingleton("core/resource")->getTableName('insync_companycontact')), 'e.entity_id = ccontact.customer_id', array('ccontact.*'));				$collection->getSelect()->joinLeft(array('company' => Mage::getSingleton("core/resource")->getTableName('insync_company')), 'company.company_id = ccontact.company_id', array('company.company_name', 'company.company_id'));				$collection->getSelect()->joinLeft(array('website' => Mage::getSingleton("core/resource")->getTableName('core_website')), 'e.website_id = website.website_id', array('website.name as websitename'));				//            $collection->getSelect()->where('(company.company_name = "' . $companyname . '" or company.company_id is null)');				$collection->load();				$collectiondata = $collection->toArray();					// load company customer									$data = Mage::helper('insync_company')->getCompany(null, null, $companyname, true);					// load General group// 				$targetGroup = Mage::getModel('customer/group')->load($contactpacket['customergroup_id'],'customer_group_code');// 				if(!$targetGroup->getId()){// 					$this->_fault('data_invalid', 'Customer group not found ['.$contactpacket['customergroup'].']');// 					$error['faultstring'] = 'Customer group not found ['.$contactpacket['customergroup'].']';// 					return $error;// 				}			// 			$companygroupid = $targetGroup->getId();				// load General group										foreach ($contactlist as $contactpacket) {																														$contactpacket = (array) $contactpacket;										//Mage::log($contactpacket['customer_group_id'],null,'biplab.log');					//$customer->setWebsiteId($contactpacket['website_id']);					$customerid = 0;					/* CONTACT PERSON HANDLING WITH IDS RATHER THAN EMAIL */					if (!empty($contactpacket['customer_id']))						$customerid = $contactpacket['customer_id'];															//start					$customer_token_exist=0;	// to check if customer tocken is exist or not					if($customerid==0 || $customerid==''){						$CustomerEmail = trim($contactpacket['email']);						$customerExist = Mage::getModel('customer/customer')						->getCollection()						->addAttributeToSelect('*')						->addAttributeToFilter('email', $CustomerEmail )						->getFirstItem();												//Mage::log($contactpacket,null,'biplab1.log');											//load customer by email id //use echo $Customer->getId(); echo $Customer->getFirstName(); //print_r($customer->getData()); - See more at: http://www.expertwebadvisor.com/get-all-the-customer-details-by-email-id-in-magento/#sthash.tl5zaaKW.dpuf						if($customerExist->getId()>0){							$contactPersons[] = array('customer_id' => $customerExist->getId(),'customer_token' =>$contactpacket['customer_token'] );														$db = Mage::getSingleton('core/resource')->getConnection('core_read');							$tablename  = Mage::getSingleton('core/resource')->getTableName('insync_companycontact');							$select = $db->select()->from($tablename)->where('customer_id=?',$customerExist->getId());														$contactreturn = $db->fetchAll($select);							//Mage::log($customerExist->getId(),null,'biplab1.log');														if (empty($contactreturn)){								Mage::helper('insync_company')->insertCompanyContactIfNotExist($customerExist->getId(), $data['company_id'], $contactpacket['addtocompany'], $contactpacket['islogin']);								Mage::helper('insync_company')->applyCompanyDefaultBillingDefaultShippingAddress($data['company_id'], $customerExist->getId());							}														continue;						}					}																				//end															/* foreach ($collectiondata as $value) {						if ($value['email'] == $contactpacket['email']) {							$customerid = $value['entity_id'];							break;						}					} */					$customer = Mage::getModel("customer/customer");					$genderid = 0;					if ($contactpacket['gender'] == 'Male' || $contactpacket['gender'] == 'Female') {						$genderid = Mage::getResourceModel('customer/customer')						->getAttribute('gender')						->getSource()						->getOptionId($contactpacket['gender']);					}					if ($customerid != 0) {						// update							$isactive = Mage::helper('insync_company')->isCustomerActive($customerid);												//Mage::log($contactpacket['customer_group_id'],null,'biplab.log');							$customer->load($customerid);						$customer->setData('gender', $genderid);						$customer->setGroupId($contactpacket['customer_group_id']);						$customer->setEmail($contactpacket['email']);						$customer->setFirstname($contactpacket['firstname']);						$customer->setLastname($contactpacket['lastname']);						if ($contactpacket['islogin'] == 1 && !$isactive)							$customer->setConfirmation(null);						$customer->save();						if ($contactpacket['islogin'] == 1 && !$isactive)							$customer->sendNewAccountEmail();						// check weather customer do not belong to other company					} else {						//Mage::log($contactpacket['customer_group_id'],null,'biplab.log');						// create and send mail						$customer->setWebsiteId($contactpacket['website_id']);						$customer->setData('gender', $genderid);						//                    $customer->setWebsiteId(1);						$customer->setEmail($contactpacket['email']);						$customer->setFirstname($contactpacket['firstname']);						$customer->setLastname($contactpacket['lastname']);						$customer->setPassword($customer->generatePassword(10));						if ($contactpacket['islogin'] == 1)							$customer->setConfirmation(null);						$customer->setGroupId($contactpacket['customer_group_id']);						$customer->save();						if ($contactpacket['islogin'] == 1)							$customer->sendNewAccountEmail();					}					Mage::helper('insync_company')->insertCompanyContactIfNotExist($customer->getId(), $data['company_id'], $contactpacket['addtocompany'], $contactpacket['islogin']);					Mage::helper('insync_company')->applyCompanyDefaultBillingDefaultShippingAddress($data['company_id'], $customer->getId());										/*  */					$contactPersons[] = array('customer_id' => $customer->getId(), 'customer_token' => $contactpacket['customer_token']);					/*  */										unset($customer);				}//			}		}		// update manager if available		if($manager_email){			$customers  = Mage::getResourceModel('customer/customer_collection')				->addFieldToFilter('email', $manager_email);			foreach ($customers as $customer){				if($customer->getId()){					Mage::helper('insync_company')->updateCompanyManager($data['company_id'], $customer->getId());				}				break;			}		}		// update manager if available		// contact person update/save if come $customer->setActive($contactpacket['islogin']);		$finalResult = array('companyid' => $data['company_id'], 'companytoken' => $companytoken, 'companyreturnaddress' => $addressresponse, 'contactPersons' => $contactPersons, 'cperror' => $cpError);		return $finalResult;	}		public function backup_uploadCompany($companyname, $data, $companytoken, $address, $contactlist) {		$companygroupid = null;		$manager_email = null;		$addressresponse = array();		if ($companyname == '') {			$temp = 'Field [Company Name] is required *(used as company code)';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		if (strlen($companyname) > 32) {			$temp = 'Field [Company Name/Code] cannot be greater then 32 characters';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		// company data		if (!empty($data) && count($data) >= 1) {			$data = (array) $data;			$data['company_name'] = $companyname;			$requiredfields[] = 'company_name';			$requiredfields[] = 'firstname';			$requiredfields[] = 'lastname';			$error = array();			$db = Mage::getSingleton('core/resource')->getConnection('core_write');			$tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');			foreach ($requiredfields as $value) {				if ($data[$value] == '') {					$temp = 'Field [' . $value . '] is required';					$this->_fault('data_invalid', $temp);					$error['data_invalid'] = $temp;					return $error;				}			}			$data['company_id'] = Mage::helper('insync_company')->getCompany(null, 'company_id', $data['company_name']);			//validate new company			$tempnewc = Mage::helper('insync_company')->newCompanyValidate($data['email'], $data['company_name']);			if ($data['company_id'] == '' && $tempnewc > 0) {				$temp = ($tempnewc == 1) ? 'Email already exist [' . $data['email'] . ']' : 'Company Name(/code) already used ..[' . $data['companyname'] . ']';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			if ($data['discountrequired'] == 1 && intval($data['companydiscount']) <= 0) {				$temp = 'You must pass discount amount greater then zero, as you are passing discount required field to "yes" ';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			if ($data['discountrequired'] == '' && intval($data['companydiscount']) > 0) {				$temp = '[discountrequired] field is required';				$this->_fault('data_invalid', $temp);				$error['data_invalid'] = $temp;				return $error;			}			//validate new company			if ($data['company_id'] == '') {				$data['company_id'] = Mage::helper('insync_company')->insertCompanyRow($data);			} else {				$temp = $data['companycredit'];				$data['company_display_name'] = $data['companydisplayname'];				$manager_email = $data['manager_email'];				unset($data['companycredit'],$data['companydisplayname'],$data['manager_email']);				$db = Mage::getSingleton('core/resource')->getConnection('core_write');				$tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');				$db->update($tableName, $data, 'company_id=' . $data['company_id']);				$data['companycredit'] = $temp;			}			// find company group and set// 			$companytaxid = '';// 			$targetGroup = Mage::getModel('customer/group')->load($data['company_name'], 'customer_group_code');// 			if ($data['company_id'] != '') {// 				$companytaxid = Mage::helper('insync_company')->getCompany($data['company_id'], 'customertaxclass');// 			}// 			if ($targetGroup->getId() == '') {//create// 				Mage::getSingleton('customer/group')->setData(// 				array('customer_group_code' => $data['company_name']// 				, 'tax_class_id' => $data['customertaxclass'])// 				)->save();// 				$targetGroup = Mage::getModel('customer/group')->load($data['company_name'], 'customer_group_code');// 			} else {// 				$targetGroup->setCode($data['company_name']);// 				$targetGroup->setTaxClassId($data['customertaxclass']);// 				$targetGroup->save();// 			}// 			Mage::helper('insync_company')->setCompanyTaxClassOnCustomer($data['company_id'], $targetGroup->getId());			// find company group and set// 			// create or update the shopping cart price rule// 			if (intval($data['companydiscount']) > 0) {// 				Mage::helper('insync_company')->uploadCompanyShoppingCartPriceRule($data['company_name'], $targetGroup->getId(), $data['companydiscount'], $data['discountrequired']);// 			}// 			// create or update the shopping cart price rule			// Create customer group category tree			$tableName = Mage::getSingleton("core/resource")->getTableName('insync_groupcategory');			$groupcategoryid = Mage::helper('insync_company')->getCompanyCategoryId($data['company_name'], null);			if ($groupcategoryid == 0) {				//create				$categories = Mage::getModel('catalog/category')->getCollection()				->addAttributeToSelect('id')				->addAttributeToSelect('is_active');				$categoryids = '';				foreach ($categories as $category) {					if ($category->getIsActive()) { // Only pull Active categories						$categoryids .= ',' . $category->getId();					}				}				if (count($categoryids) > 3)					$categoryids = substr($categoryids, 3);				unset($categories);				$fdata = array();				$fdata['groupcategory_name'] = $data['company_name'];				$fdata['active'] = 1;				$fdata['categoryids'] = $categoryids;				$fdata['visiblecategoryids'] = $categoryids;// 				$fdata['customer_group_id'] = $targetGroup->getId();				$db->insert($tableName, $fdata);				$groupcategoryid = Mage::helper('insync_company')->getCompanyCategoryId($data['company_name'], null);			} else {				//update				$edata = array();// 				$edata['customer_group_id'] = $targetGroup->getId();				$edata['groupcategory_name'] = $data['company_name'];				$db->update($tableName, $edata, 'groupcategory_id=' . $groupcategoryid);			}			$tableName = Mage::getSingleton("core/resource")->getTableName('insync_company');			$edata = array();			$edata['companycategoryid'] = $groupcategoryid;			$db->update($tableName, $edata, 'company_id=' . $data['company_id']);			// Create customer group category tree			// update company credit if given			if (intval($data['companycredit']) > 0) {				$companycredit = Mage::helper('insync_company')->getCustomerCompanyBalance(null, $data['company_id']);				if (intval($data['companycredit']) > intval($companycredit)) { // money comes					Mage::helper('insync_company')->updateCompanyCredit($data['company_id'], null, null, null, null, 0, (intval($data['companycredit']) - intval($companycredit)), 'Assign by SAP server');				} else { // money goes					Mage::helper('insync_company')->updateCompanyCredit($data['company_id'], null, null, null, null, (intval($companycredit) - intval($data['companycredit'])), 0, 'Used by SAP server');				}			}			// update company credit if given		}		// check company existence		if (Mage::helper('insync_company')->getCompany(null, 'company_id', $companyname, false) == '') {			$temp = 'Company does not exist';			$this->_fault('data_invalid', $temp);			$error['data_invalid'] = $temp;			return $error;		}		// address packet update/save if come		if (!empty($address)) {			$data = Mage::helper('insync_company')->getCompany(null, null, $companyname, true);			// validate address			unset($requiredfields);			$requiredfields[] = 'street';			$requiredfields[] = 'city';			$requiredfields[] = 'country_id';			$requiredfields[] = 'postcode';			$requiredfields[] = 'telephone';			/* 			 * for each address packet			 * if there's an error			 * then add the fault code to an array and Continue to next address			 * else add null value consecutively			 */			$errorAddress = array();						foreach ($address as $addresspacket) {				$addresspacket = (array) $addresspacket;				// if id found load the address and check the presence				if ($addresspacket['addressId'] != '') {					if (!Mage::helper('insync_company')->isCompanyAddress($addresspacket['addressId'], $data['company_id'])) {// 						$this->_fault('data_invalid', 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist');						$errorAddress[]['data_invalid'] = 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist';						break;// 						return $error;					}				}				// if id found load the address and check the presence				$errorAddress1 = null;				foreach ($requiredfields as $value) {					if ($addresspacket[$value] == '') {// 						$this->_fault('data_invalid', '[' . $value . '] is required field, which is missing in a packet');						$errorAddress1 = '[' . $value . '] is required field, which is missing in a packet';						break;// 						return $error;					}					if ($value == 'country_id') {						$countryName = Mage::getModel('directory/country')->load($addresspacket[$value])->getName();						if ($countryName == '') {// 							$this->_fault('data_invalid', 'Country ID [' . $addresspacket[$value] . '] is not available');							$errorAddress1 = 'Country ID [' . $addresspacket[$value] . '] is not available';							break;// 							return $error;						}						$states = Mage::getModel('directory/country')->load($addresspacket[$value])->getRegions();						$temp = $states->toArray();						if (intval($temp['totalRecords']) > 0) {							if ($addresspacket['state'] == '') {// 								$this->_fault('data_invalid', 'State field is required for Country [' . $countryName . ']');								$errorAddress1 = 'State field is required for Country [' . $countryName . ']';								break;// 								return $error;							} else {								// validate for state								$found = false;								foreach ($temp['items'] as $v) {									$tv = (array) $v;									if ($tv['code'] == $addresspacket['state']) {										$found = true;										break;									}								}								if (!$found) {// 									$this->_fault('data_invalid', 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']');									$errorAddress1 = 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']';									break;// 									return $error;								}							}						}					}// 					$errorAddress1 = null;	//	Null for address packet where no error occurred				}				$errorAddress[]['data_invalid'] = $errorAddress1;			}			// validate address			$temp = Mage::helper('insync_company')->getCompanyDefaultAddress($data['company_id']);			foreach ($address as $value) {				/* if $errorAddress[0] has 'data_invaild' key, then array_shift $errorAddress and CONTINUE */				if (isset($errorAddress[0]['data_invalid'])) {					//Mage::log('/* if $errorAddress[0] has data_invaild key, then array_shift $errorAddress and CONTINUE */', null, '24_March.log');//Mage::log($errorAddress, null, '24_March.log');					$addressresponse[]['error'] = $errorAddress[0]['data_invalid'];					array_shift($errorAddress);					continue;				}				array_shift($errorAddress);								$dd = (array) $value;				$old_id = $dd['addressId'];				$tempdata['aectoken'] = $dd['aectoken'];				$dd['firstname'] = ($dd['firstname']) ? $dd['firstname'] : $data['firstname'];				$dd['middlename'] = ($dd['middlename']) ? $dd['middlename'] : $data['middlename'];				$dd['lastname'] = ($dd['lastname']) ? $dd['lastname'] : $data['lastname'];				$dd['company'] = $data['company_name'];				$dd['company_id'] = $data['company_id'];				$dd['street'] = serialize($dd['street']);								/*  */				$tempdata['is_default_billing'] = $dd['is_default_billing'];				$tempdata['is_default_shipping'] = $dd['is_default_shipping'];							/*  */				$dd['is_billing'] = ($dd['is_default_billing'] == 1) ? 1 : 0;				$dd['is_shipping'] = ($dd['is_default_shipping'] == 1) ? 1 : 0;				unset($dd['is_default_billing'], $dd['is_default_shipping'], $dd['aectoken'], $dd['addressId']);				if (!empty($old_id)) {					$isadd = 0;					if ($dd['is_billing'] == 1) {						$this->updateCompanyDefaultAddress($old_id, $dd, 'is_billing', $data['company_id']);						$tempdata['addressId'] = $old_id;						$isadd += 1;					}					if ($dd['is_shipping'] == 1) {						$this->updateCompanyDefaultAddress($old_id, $dd, 'is_shipping', $data['company_id']);						$tempdata['addressId'] = $old_id;						$isadd += 1;					}					if ($isadd == 0) { // update default if nothing found						$this->updateCompanyDefaultAddress($old_id, $dd, '', $data['company_id']);						$tempdata['addressId'] = $old_id;					}				} else {					$isadd = 0;					if ($dd['is_billing'] == 1 && $temp['billing'] != 0) {						$this->updateCompanyDefaultAddress($temp['billing'], $dd, 'is_billing', $data['company_id']);						$tempdata['addressId'] = $temp['billing'];						$isadd += 1;					}					if ($dd['is_shipping'] == 1 && $temp['shipping'] != 0) {						$this->updateCompanyDefaultAddress($temp['shipping'], $dd, 'is_shipping', $data['company_id']);						$tempdata['addressId'] = $temp['shipping'];						$isadd += 1;					}					if ($isadd == 0) { // insert if nothing found						$tempdata['addressId'] = $this->insertCompanyAddres($dd);					}				}				$addressresponse[] = $tempdata;				unset($old_id, $dd);			}		}		// address packet update/save if come		// contact person update/save if come		if (!empty($contactlist)) {			// validate			foreach ($contactlist as $contactpacket) {				$contactpacket = (array) $contactpacket;				if ($contactpacket['website_id'] == '' || $contactpacket['firstname'] == '' || $contactpacket['lastname'] == '' || $contactpacket['email'] == '' || $contactpacket['addtocompany'] == '' || $contactpacket['customergroup'] == '') {					$temp = 'All fields in each Contact list are mandatory [website_id][firstname][lastname][email][addtocompany][customergroup]';					$this->_fault('data_invalid', $temp);					$error['data_invalid'] = $temp;					return $error;				}			}			// load company customer			$collection = Mage::getModel('customer/customer')->getCollection()->addAttributeToSelect('*');			$collection->getSelect()->joinLeft(array('ccontact' => Mage::getSingleton("core/resource")->getTableName('insync_companycontact')), 'e.entity_id = ccontact.customer_id', array('ccontact.*'));			$collection->getSelect()->joinLeft(array('company' => Mage::getSingleton("core/resource")->getTableName('insync_company')), 'company.company_id = ccontact.company_id', array('company.company_name', 'company.company_id'));			$collection->getSelect()->joinLeft(array('website' => Mage::getSingleton("core/resource")->getTableName('core_website')), 'e.website_id = website.website_id', array('website.name as websitename'));			//            $collection->getSelect()->where('(company.company_name = "' . $companyname . '" or company.company_id is null)');			$collection->load();			$collectiondata = $collection->toArray();			// load company customer			$data = Mage::helper('insync_company')->getCompany(null, null, $companyname, true);			// load General group			$targetGroup = Mage::getModel('customer/group')->load($contactpacket['customergroup'],'customer_group_code');			if(!$targetGroup->getId()){				$this->_fault('data_invalid', 'Customer group not found ['.$contactpacket['customergroup'].']');				$error['data_invalid'] = 'Customer group not found ['.$contactpacket['customergroup'].']';				return $error;			}// 			$companygroupid = $targetGroup->getId();			// load General group			foreach ($contactlist as $contactpacket) {				$contactpacket = (array) $contactpacket;				//$customer->setWebsiteId($contactpacket['website_id']);				$customerid = 0;				foreach ($collectiondata as $value) {					if ($value['email'] == $contactpacket['email']) {						$customerid = $value['entity_id'];						break;					}				}				$customer = Mage::getModel("customer/customer");				$genderid = 0;				if ($contactpacket['gender'] == 'Male' || $contactpacket['gender'] == 'Female') {					$genderid = Mage::getResourceModel('customer/customer')					->getAttribute('gender')					->getSource()					->getOptionId($contactpacket['gender']);				}				if ($customerid != 0) {					// update					$isactive = Mage::helper('insync_company')->isCustomerActive($customerid);					$customer->load($customerid);					$customer->setData('gender', $genderid);					$customer->setGroupId($targetGroup->getId());					$customer->setEmail($contactpacket['email']);					$customer->setFirstname($contactpacket['firstname']);					$customer->setLastname($contactpacket['lastname']);					if ($contactpacket['islogin'] == 1 && !$isactive)						$customer->setConfirmation(null);					$customer->save();					if ($contactpacket['islogin'] == 1 && !$isactive)						$customer->sendNewAccountEmail();					// check weather customer do not belong to other company				} else {					// create and send mail					$customer->setWebsiteId($contactpacket['website_id']);					$customer->setData('gender', $genderid);					//                    $customer->setWebsiteId(1);					$customer->setEmail($contactpacket['email']);					$customer->setFirstname($contactpacket['firstname']);					$customer->setLastname($contactpacket['lastname']);					$customer->setPassword($customer->generatePassword(10));					if ($contactpacket['islogin'] == 1)						$customer->setConfirmation(null);					$customer->setGroupId($targetGroup->getId());					$customer->save();					if ($contactpacket['islogin'] == 1)						$customer->sendNewAccountEmail();				}				Mage::helper('insync_company')->insertCompanyContactIfNotExist($customer->getId(), $data['company_id'], $contactpacket['addtocompany'], $contactpacket['islogin']);				Mage::helper('insync_company')->applyCompanyDefaultBillingDefaultShippingAddress($data['company_id'], $customer->getId());				unset($customer);			}		}		// update manager if available		if($manager_email){			$customers  = Mage::getResourceModel('customer/customer_collection')				->addFieldToFilter('email', $manager_email);			foreach ($customers as $customer){				if($customer->getId()){					Mage::helper('insync_company')->updateCompanyManager($data['company_id'], $customer->getId());				}				break;			}		}		// update manager if available		// contact person update/save if come $customer->setActive($contactpacket['islogin']);		$finalResult = array('companyid' => $data['company_id'], 'companytoken' => $companytoken, 'companyreturnaddress' => $addressresponse);		return $finalResult;	}	private function insertCompanyAddres($data) {		// save new address		$db = Mage::getSingleton('core/resource')->getConnection('core_write');		$tableName = Mage::getSingleton("core/resource")->getTableName('insync_companyaddress');		if (!isset($data['is_billing']))			$data['is_billing'] = 0;		if (!isset($data['is_shipping']))			$data['is_shipping'] = 0;		unset($data['is_default_billing'], $data['is_default_shipping']);		if ($data['id'] != '') {			$addressid = $data['id'];			unset($data['id']);			$db->update($tableName, $data, 'address_id=' . $addressid);			return $addressid;		} else {			unset($data['id']);			$db->insert($tableName, $data);			return $db->lastInsertId(); // do not guarantee that :(		}	}	private function updateCompanyDefaultAddress($companyaddressid, $addresspacket, $addressclause, $companyid) {		if (!isset($addresspacket['is_billing']))			$addresspacket['is_billing'] = 0;		if (!isset($addresspacket['is_shipping']))			$addresspacket['is_shipping'] = 0;		$db = Mage::getSingleton('core/resource')->getConnection('core_write');		$tableName = Mage::getSingleton("core/resource")->getTableName('insync_companyaddress');		// first apply reset type then update		if ($addressclause != '')			$db->update($tableName, array($addressclause => '=0'), $addressclause . '=1');		$db->update($tableName, $addresspacket, 'address_id=' . $companyaddressid);		// apply on all active contact if it is default billing or shipping		if ($addressclause != '') {			$tableName = Mage::getSingleton("core/resource")->getTableName('insync_companycontact');			if ($addressclause == 'is_billing') {				$select = $db->select()->from($tableName)->where('company_id=?', $companyid)				->where('active=?', 1);			} elseif ($addressclause == 'is_shipping') {				$select = $db->select()->from($tableName)->where('company_id=?', $companyid)				->where('active=?', 1);			}			$stmt = $db->query($select);			$customerresult = $stmt->fetchAll();			foreach ($customerresult as $value) {				// load address				$addressid = ($addressclause == 'is_billing') ? $value['billing'] : $value['shipping'];				$address = Mage::getModel('customer/address')->load($addressid);				foreach ($addresspacket as $key => $value) {					$address->setData($key, $value);				}				$address->setIsDefaultBilling($addresspacket['is_billing']);				$address->setIsDefaultShipping($addresspacket['is_shipping']);				$regionId = $this->getReginId($addresspacket['state'], $addresspacket['country_id']);				if (isset($regionId) && $regionId != '0') {					$address->setData('region_id', $regionId);				} else {					$address->setData('region', $addresspacket['state']);				}				$address->save();			}			// apply on all active contact if it is default billing or shipping		}	}	public function getReginId($regionCode, $countryCode) {		$regionModel = Mage::getModel('directory/region_api')->items($countryCode);		foreach ($regionModel as $key) {			if ($key['code'] == $regionCode) {				return $key['region_id'];			}		}		return 0;	}	// order list	public function orderiitems1($filters = null, $withsync = false) {			$billingAliasName = 'billing_o_a';		$shippingAliasName = 'shipping_o_a';		$preparedFilters = array();		if (isset($filters->filter)) {			foreach ($filters->filter as $_filter) {				$preparedFilters[$_filter->key] = $_filter->value;			}		}		if (isset($filters->complex_filter)) {			foreach ($filters->complex_filter as $_filter) {				$_value = $_filter->value;				if ($_value->key == 'in') {					$_value->value = explode(',', $_value->value);				}				$preparedFilters[$_filter->key] = array(						$_value->key => $_value->value				);			}		}		$websiteid = array();		$orderLimittemp = array();		$orderincrementid = array();		$orderStatus = array();		if (!empty($preparedFilters)) {			foreach ($preparedFilters as $field => $value) {				if ($field == 'website_id') {					$websiteid = $value;				} else if ($field == 'limit') {					$orderLimittemp = $value;				} else if ($field == 'increment_id') {					$orderincrementid = $value;				} else if ($field == 'status') {					$orderStatus = $value;				}			}		}		$orderLimit = '';		foreach ($orderLimittemp as $key => $value) {			if ($key == 'eq') {				$orderLimit = $value;			}		}		if (is_array($websiteid)) {			foreach ($websiteid as $key => $value) {				if ($key == 'in') {					$websiteid = $value;				} else {					$websiteid = array($value);				}			}		} else {			$websiteid = explode(',', $websiteid);		}		if (is_array($orderincrementid)) {			foreach ($orderincrementid as $key => $value) {				if ($key == 'in') {					$orderincrementid = $value;				} else {					$orderincrementid = array($value);				}			}		}		$filterstore = array();		foreach ($websiteid as $website) {			$website_model = Mage::getModel('core/website');			$_storeIds = $website_model->load($website, 'website_id')->getStoreIds();			foreach ($_storeIds as $key => $value) {				$filterstore[] = $value;			}		}		$result = array();		$collection = Mage::getModel("sales/order")->getCollection()		->addAttributeToSelect('*')		->addAddressFields()		->addExpressionFieldToSelect(				'billing_firstname', "{{billing_firstname}}", array('billing_firstname' => "$billingAliasName.firstname")		)		->addExpressionFieldToSelect(				'billing_lastname', "{{billing_lastname}}", array('billing_lastname' => "$billingAliasName.lastname")		)		->addExpressionFieldToSelect(				'shipping_firstname', "{{shipping_firstname}}", array('shipping_firstname' => "$shippingAliasName.firstname")		)		->addExpressionFieldToSelect(				'shipping_lastname', "{{shipping_lastname}}", array('shipping_lastname' => "$shippingAliasName.lastname")		)		->addExpressionFieldToSelect(				'billing_name', "CONCAT({{billing_firstname}}, ' ', {{billing_lastname}})", array('billing_firstname' => "$billingAliasName.firstname", 'billing_lastname' => "$billingAliasName.lastname")		)		->addExpressionFieldToSelect(				'shipping_name', 'CONCAT({{shipping_firstname}}, " ", {{shipping_lastname}})', array('shipping_firstname' => "$shippingAliasName.firstname", 'shipping_lastname' => "$shippingAliasName.lastname")		);		//         Mage::log($collection->getSelectSQL(true));		$orderobj = new Mage_Sales_Model_Order_Api_V2();		if (!empty($preparedFilters)) {			try {				foreach ($preparedFilters as $field => $value) {					if ($field == 'website_id' || $field == 'limit' || $field == 'increment_id' || $field == 'status') {						continue;					}					if (isset($orderobj->_attributesMap['order'][$field])) {						$field = $orderobj->_attributesMap['order'][$field];					}					$collection->addFieldToFilter($field, $value);				}			} catch (Mage_Core_Exception $e) {				$this->_fault('filters_invalid', $e->getMessage());			}		}		if (!empty($filterstore))			$collection->addFieldToFilter('store_id', $filterstore);		if (!empty($orderincrementid))			$collection->addFieldToFilter('increment_id', $orderincrementid);		if ($withsync)			$collection->getSelect()->where("SapSync = '0'");		if (!empty($orderLimit))			$collection->getSelect()->limit($orderLimit);		//        Mage::log($collection->getSelectSQL(true));				foreach ($collection as $order) {			$rOrder = $orderobj->_getAttributes($order, 'order');			$rOrder['shipping_address'] = $orderobj->_getAttributes($order->getShippingAddress(), 'order_address');			$a = $order->getShippingAddress();			$rOrder['shipping_address']['street'] = preg_split("/\r?\n/", $a['street']);			$rOrder['billing_address'] = $orderobj->_getAttributes($order->getBillingAddress(), 'order_address');			$b = $order->getBillingAddress();			$rOrder['billing_address']['street'] = preg_split("/\r?\n/", $b['street']);			if ($rOrder['shipping_address']['region_id'] != NULL && array_key_exists('region_id', $rOrder['shipping_address'])) {				$regionObj = new Mage_Directory_Model_Region();				$regionObj->load($rOrder['shipping_address']['region_id']);				if ($regionObj->getData('code') != NULL) {					$rOrder['shipping_address_region_code'] = $rOrder['shipping_address']['region'] . '@' . $regionObj->getData('code');				}				unset($regionObj);			}			if ($rOrder['billing_address']['region_id'] != NULL && array_key_exists('region_id', $rOrder['billing_address'])) {				$regionObj = new Mage_Directory_Model_Region();				$regionObj->load($rOrder['billing_address']['region_id']);				if ($regionObj->getData('code') != NULL) {					$rOrder['billing_address_region_code'] = $rOrder['billing_address']['region'] . '@' . $regionObj->getData('code');				}				unset($regionObj);			}			$rOrder['itemss'] = array();			$ordertotaltaxamount = 0;			$tempTax = array();			foreach ($order->getAllItems() as $item) {				if (0 == (int) $item->getTaxPercent()) {					$item['tax_code'] = 'NoTaxCode';				} else if (0 == (int) $item['price'] && 0 == (int) $item['base_price'] && 0 == (int) $item['original_price']) {					$item['tax_code'] = '';				} else {					$tempTax = $this->_setTaxCode($order);					foreach ($tempTax as $eachTax) {						$tax_model = Mage::getModel('tax/calculation_rate');						$_taxIds = $tax_model->load($eachTax, 'code')->getTaxCalculationRateId();						$taxCollection = Mage::getModel('tax/calculation_rate')						->getCollection()						->addFieldToFilter('tax_calculation_rate_id', $_taxIds);						foreach ($taxCollection as $taxTemp) {							if ((string) $item->getTaxPercent() == (string) $taxTemp->getRate())								$item['tax_code'] = $taxTemp->getCode();						}						unset($taxCollection);					}				}				/*                 * ******************* Custom option work *************************** */				//                $product = Mage::getModel("catalog/product")->load($item['product_id']);				//                $item['sku'] = $product->getSku();				//                unset($product);				$arrayofoption = array();				$customOptions = $item->getProductOptions();				foreach ($customOptions['options'] as $o) {					$temparraydata = array();					$temparraydata['optiontype'] = $o['option_type'];					$temparraydata['optiontitle'] = $o['label'];					// Getting Values if it has option values, case of select,dropdown,radio,multiselect					$default_title = $o['value'];					$values = $o['value'];					foreach ($values as $v) {						$tempdd = $v->getData();						$default_title.= $tempdd['default_title'] . ',';					}					$temparraydata['default_title'] = $default_title;					$arrayofoption[] = $temparraydata;				}				$item['customoption'] = $arrayofoption;				$item["base_price"] = $item["price"];				$rOrder['itemss'][] = $item;				/*                 * ******************* Custom option work *************************** */			}			// couponcode start -------------------------------------------------			$c = Mage::getResourceModel('salesrule/rule_collection');			$c->getSelect();			$discountPercent = 0;			$copcode;			foreach ($c->getItems() as $item) {				if (($item->getData('code') == '')) {					continue;				} else if ($item->getData('code') == $order->getCouponCode()) {					if ($item->getData('simple_action') == 'by_fixed') {						$discountPercent = ($item->getData('discount_amount')) * count($rOrder['items']);					} else if ($item->getData('simple_action') == 'by_percent') {						$discountPercent = ($item->getData('discount_amount') * 100) / $order->getBaseSubtotal();					}				}			}			unset($c);			$rOrder['couponcode'] = $order->getCouponCode();			$rOrder['coupondiscountpercent'] = $discountPercent;			// couponcode end -------------------------------------------------			//$rOrder['payment'] = $this->_getAttributes($order->getPayment(), 'order_payment');			// payment detail start ---------------------------------------------			$temppayment = $orderobj->_getAttributes($order->getPayment(), 'order_payment');			$temp = $temppayment['last_trans_id'];			if (isset($temp)) {				if (strlen($temp) > 5)					$rOrder['payment_last_trans_id'] = substr($temp, strlen($temp) - 5, strlen($temp) - 1);				else					$rOrder['payment_last_trans_id'] = $temp;			}			$cc_type_name = array(					'VI' => 'Visa', 'MC' => 'MasterCard', 'DI' => 'Discover', 'AE' => 'Amex', 'SM' => 'Maestro', 'SO' => 'Solo');			$temppayment['cc_number'] = $order->getPayment()->getData('cc_number');			$temppayment['cc_type_name'] = $cc_type_name[$order->getPayment()->getData('cc_type')];			if (trim($temppayment['last_trans_id']) == '') { // if last_trans_id not found, look it in additional_information				foreach ($temppayment['additional_information'] as $additionalarray1) {					foreach ($additionalarray1 as $additionalarray2) {						foreach ($additionalarray2 as $key => $value) {							$temppayment[$key] = $value;							$rOrder['payment_last_trans_id'] = $temppayment['last_trans_id'];							if ($key == 'cc_type')								$temppayment['cc_type_name'] = $cc_type_name[$value];						}					}				}			}else {				foreach ($temppayment['additional_information'] as $key => $value) {					if ($key == 'paypal_payer_id') {						$temppayment['cc_number'] = $value;						break;					}				}			}			$rOrder['payment'] = $temppayment;			// payment detail end   ---------------------------------------------			$rOrder['status_history'] = array();			foreach ($order->getAllStatusHistory() as $history) {				$rOrder['status_history'][] = $orderobj->_getAttributes($history, 'order_status_history');			}			// $rOrder['shipment_tax'] = $this->_getShipmentTaxDetails($order, 'code');			// $rOrder['shipping_tax_amount'] = $this->_getShipmentTaxDetails($order, 'amount');			$orderTax = (string) round($rOrder['tax_amount'], 2);			$orderitemtotaltax = (string) $ordertotaltaxamount;			if ((strcmp($orderTax, $orderitemtotaltax)) && (($orderTax == $orderitemtotaltax))) {				$rOrder['shipment_tax'] = $this->_getShipmentTaxDetails($order, 'code');				$rOrder['shipping_tax_amount'] = $this->_getShipmentTaxDetails($order, 'amount');			} else {				$rOrder['shipment_tax'] = '';				$rOrder['shipping_tax_amount'] = 0;			}			$result[] = $rOrder;		}		return $result;	}	protected function _setTaxCode($ordObj) {		$obj = new Mage_Tax_Model_Mysql4_Sales_Order_Tax_Collection();		$obj->loadByOrder($ordObj);		$dataTax = array();		foreach ($obj->getData('code') as $data) {			if (isset($data['code'])) {				$dataTax[] = $data['code'];			} else {				$dataTax[] = 'NoTaxCode';			}		}		return $dataTax;	}	protected function _getShipmentTaxDetails($order, $type = '') {		$result = '';		// --------------		$producttaxclass = -1;		foreach ($order->getAllItems() as $item) {			$objSapConfig = new Insync_Sap_Model_Config();			$product = $objSapConfig->_getProduct($item['sku'], Mage_Core_Model_App::ADMIN_STORE_ID, 'sku');			$producttaxclass = $product->getTaxClassId();			unset($objSapConfig);			break;		}		// --------------		$storeId = $order->getStoreId();		$store = Mage::getModel('core/store')->load($storeId);		$customerTaxClassId = Mage::getModel('customer/group')->getTaxClassId($order->getCustomerGroupId());		$shippingTaxClass = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_SHIPPING_TAX_CLASS, $storeId);		$taxCalculationModel = Mage::getModel('tax/calculation');		$request = $taxCalculationModel->getRateRequest($order->getShippingAddress(), $order->getBillingAddress(), $customerTaxClassId, $store);		$request->setProductClassId($shippingTaxClass);		$taxMysqlCalculationModel = new Mage_Tax_Model_Mysql4_Calculation();		$rateInfo = $taxMysqlCalculationModel->getRateInfo($request);		if (array_key_exists('process', $rateInfo)) {			if (count($rateInfo['process'])) {				$_amount = 0;				$_code = '';				$_rate = 0;				if ($producttaxclass != 0) {					$_rate = $rateInfo['value'];					$_code = $rateInfo['process'][0]['id'];					$_amount = number_format(round($order->getShippingAmount() * $_rate / 100, 4), 4);				}				switch ($type) {					case 'code':						$result = $_code;						break;					case 'rate':						$result = $_rate;						break;					case 'amount':						$result = $_amount;						break;					default:						$result = array(						'code' => $_code,						'rate' => $_rate,						'amount' => $_amount,						);						break;				}			}		}		return $result;	}	public function unsyncSalesOrder($filters = null) {		return $this->items($filters, false);	}	// order list	// category	public function reApplyAllCat(){		// get all active category		$categories = Mage::getModel('catalog/category')->getCollection()		->addAttributeToSelect('id')
		->addAttributeToSelect('is_active');

$categoryids = '';
foreach ($categories as $category) {
    if ($category->getIsActive()) { // Only pull Active categories
        $categoryids .= ',' . $category->getId();
    }
}
if (count($categoryids) > 3)
    $categoryids = substr($categoryids, 3);
unset($categories);

// update all category by zend db
$db = Mage::getSingleton('core/resource')->getConnection('core_write');
$tableName = Mage::getSingleton("core/resource")->getTableName('insync_groupcategory');
$fdata = array();
$fdata['categoryids'] = $categoryids;
$fdata['visiblecategoryids'] = $categoryids;
$db->update($tableName, $fdata, $db->quoteInto('active=?', 1));	}	// category		public function validateAddress($address, $data){		// validate address				$requiredfields[] = 'street';		$requiredfields[] = 'city';		$requiredfields[] = 'country_id';		$requiredfields[] = 'postcode';		$requiredfields[] = 'telephone';		/*		 * for each address packet		 * if there's an error		 * then add the fault code to an array and Continue to next address		 * else add null value consecutively		 */		$errorAddress = array();					foreach ($address as $addresspacket) {			$addresspacket = (array) $addresspacket;			// if id found load the address and check the presence			/* if ($addresspacket['addressId'] != '') {				if (!Mage::helper('insync_company')->isCompanyAddress($addresspacket['addressId'], $data['company_id'])) {					$this->_fault('data_invalid', 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist');					$error['data_invalid'] = 'Company AddressID [' . $addresspacket['addressId'] . '] doesnot exist';					// break;					return $error;				}			} */			// if id found load the address and check the presence			$errorAddress1 = null;			foreach ($requiredfields as $value) {				if (empty( $addresspacket[$value]) ) {					$this->_fault('data_invalid', '[' . $value . '] is required field, which is missing in a packet');					$error['data_invalid'] = '[' . $value . '] is required field, which is missing in a packet';					//						break;					return $error;				}				if ($value == 'country_id') {					$countryName = Mage::getModel('directory/country')->load($addresspacket[$value])->getName();					if ($countryName == '') {						$this->_fault('data_invalid', 'Country ID [' . $addresspacket[$value] . '] is not available');						$error['data_invalid'] = 'Country ID [' . $addresspacket[$value] . '] is not available';						//							break;						return $error;					}					$states = Mage::getModel('directory/country')->load($addresspacket[$value])->getRegions();					$temp = $states->toArray();					if (intval($temp['totalRecords']) > 0) {						if ($addresspacket['state'] == '') {							$this->_fault('data_invalid', 'State field is required for Country [' . $countryName . ']');							$error['data_invalid'] = 'State field is required for Country [' . $countryName . ']';							//								break;							return $error;						} else {							// validate for state							$found = false;							foreach ($temp['items'] as $v) {								$tv = (array) $v;								if ($tv['code'] == $addresspacket['state']) {									$found = true;									break;								}							}							if (!$found) {								$this->_fault('data_invalid', 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']');								$error['data_invalid'] = 'State [' . $addresspacket['state'] . '] not found for [' . $countryName . ']';								//									break;								return $error;							}						}					}				}				// 					$errorAddress1 = null;	//	Null for address packet where no error occurred			}					}		return false;		// validate address	}}